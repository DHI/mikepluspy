"""The Import Tool from MIKE+."""

import os.path
from DHI.Amelia.Tools.ImportTool.ImportEngine import FunctionHelper
from DHI.Amelia.Tools.ImportTool.ImportEngine import ImportToolBase
from ..database import Database


class ImportTool:
    """The Import Tool from MIKE+.

    Parameters
    ----------
    configFile: A xml configuration file. This file can be generated by MIKE+ application.
    database: Database object or DataTableContainer, it can be None. If it is None, it will create a new empty database.

    Examples
    --------
    >>>from mikeplus import Database
    >>>db = Database("path/to/model.sqlite")
    >>>import_tool = ImportTool("../tests/testdata/import/config.xml", db)
    >>>import_tool.run()
    >>>db.close()

    """

    def __init__(self, configFile, database=None):
        """Initialize the ImportTool with the given configuration file and Database.

        Parameters
        ----------
        configFile : str
            A xml configuration file. This file can be generated by MIKE+ application.
        database : Database or DataTables, optional
            A Database object for the MIKE+ model, or for backward compatibility,
            a DataTables object from DataTableAccess. It can be None. If it is None,
            it will create a new empty database.

        """
        self._configFile = os.path.abspath(configFile)
        self._dataTables = (
            self._get_data_tables(database) if database is not None else None
        )

    def _get_data_tables(self, database):
        """Get proper DataTableContainer, working with deprecated DataTableAccess workflow."""
        if isinstance(database, Database):
            if not database.is_open:
                database.open()
            return database._data_table_container

        # if not Database object, assume user passed DataTableAccess.datatables per previous workflow
        return database

    def run(self):
        """Run the import tool."""
        import_engine = ImportToolBase(self._dataTables)
        import_engine.Load(self._configFile)
        FunctionHelper.ChangeFilePathInConfigToAbsolute(
            import_engine.JobConfigSectionsDic, self._configFile
        )
        import_engine.OnTableDataProcessing += self._on_table_data_processing
        import_engine.Run()

    def _on_table_data_processing(self, source, args):
        print(args.TileInfo)
